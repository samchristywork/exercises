UNKNOWN             #
IDENTIFIER          include
PUNCTUATOR          <
IDENTIFIER          ctype
PUNCTUATOR          .
IDENTIFIER          h
PUNCTUATOR          >
UNKNOWN             #
IDENTIFIER          include
PUNCTUATOR          <
IDENTIFIER          stdbool
PUNCTUATOR          .
IDENTIFIER          h
PUNCTUATOR          >
UNKNOWN             #
IDENTIFIER          include
PUNCTUATOR          <
IDENTIFIER          stdio
PUNCTUATOR          .
IDENTIFIER          h
PUNCTUATOR          >
UNKNOWN             #
IDENTIFIER          include
PUNCTUATOR          <
IDENTIFIER          stdlib
PUNCTUATOR          .
IDENTIFIER          h
PUNCTUATOR          >
UNKNOWN             #
IDENTIFIER          include
PUNCTUATOR          <
IDENTIFIER          string
PUNCTUATOR          .
IDENTIFIER          h
PUNCTUATOR          >
KEYWORD             typedef
KEYWORD             enum
PUNCTUATOR          {
IDENTIFIER          KEYWORD
PUNCTUATOR          ,
IDENTIFIER          IDENTIFIER
PUNCTUATOR          ,
IDENTIFIER          CONSTANT
PUNCTUATOR          ,
IDENTIFIER          STRING_LITERAL
PUNCTUATOR          ,
IDENTIFIER          CHARACTER_CONSTANT
PUNCTUATOR          ,
IDENTIFIER          SINGLE_LINE_COMMENT
PUNCTUATOR          ,
IDENTIFIER          MULTI_LINE_COMMENT
PUNCTUATOR          ,
IDENTIFIER          PUNCTUATOR
PUNCTUATOR          ,
IDENTIFIER          UNKNOWN
PUNCTUATOR          }
IDENTIFIER          TokenType
PUNCTUATOR          ;
KEYWORD             const
KEYWORD             char
PUNCTUATOR          *
IDENTIFIER          colorCodes
PUNCTUATOR          [
PUNCTUATOR          ]
PUNCTUATOR          =
PUNCTUATOR          {
STRING_LITERAL      "\033[0;31m"
PUNCTUATOR          ,
STRING_LITERAL      "\033[0;32m"
PUNCTUATOR          ,
STRING_LITERAL      "\033[0;33m"
PUNCTUATOR          ,
STRING_LITERAL      "\033[0;34m"
PUNCTUATOR          ,
STRING_LITERAL      "\033[0;35m"
PUNCTUATOR          ,
STRING_LITERAL      "\033[0;36m"
PUNCTUATOR          ,
STRING_LITERAL      "\033[0;37m"
PUNCTUATOR          ,
STRING_LITERAL      "\033[0;38m"
PUNCTUATOR          ,
STRING_LITERAL      "\033[0;39m"
PUNCTUATOR          }
PUNCTUATOR          ;
KEYWORD             typedef
KEYWORD             struct
PUNCTUATOR          {
IDENTIFIER          TokenType
IDENTIFIER          type
PUNCTUATOR          ;
KEYWORD             int
IDENTIFIER          start
PUNCTUATOR          ;
KEYWORD             int
IDENTIFIER          end
PUNCTUATOR          ;
PUNCTUATOR          }
IDENTIFIER          Token
PUNCTUATOR          ;
KEYWORD             const
KEYWORD             char
PUNCTUATOR          *
IDENTIFIER          keywords
PUNCTUATOR          [
PUNCTUATOR          ]
PUNCTUATOR          =
PUNCTUATOR          {
STRING_LITERAL      "auto"
PUNCTUATOR          ,
STRING_LITERAL      "break"
PUNCTUATOR          ,
STRING_LITERAL      "case"
PUNCTUATOR          ,
STRING_LITERAL      "char"
PUNCTUATOR          ,
STRING_LITERAL      "const"
PUNCTUATOR          ,
STRING_LITERAL      "continue"
PUNCTUATOR          ,
STRING_LITERAL      "default"
PUNCTUATOR          ,
STRING_LITERAL      "do"
PUNCTUATOR          ,
STRING_LITERAL      "double"
PUNCTUATOR          ,
STRING_LITERAL      "else"
PUNCTUATOR          ,
STRING_LITERAL      "enum"
PUNCTUATOR          ,
STRING_LITERAL      "extern"
PUNCTUATOR          ,
STRING_LITERAL      "float"
PUNCTUATOR          ,
STRING_LITERAL      "for"
PUNCTUATOR          ,
STRING_LITERAL      "goto"
PUNCTUATOR          ,
STRING_LITERAL      "if"
PUNCTUATOR          ,
STRING_LITERAL      "int"
PUNCTUATOR          ,
STRING_LITERAL      "long"
PUNCTUATOR          ,
STRING_LITERAL      "register"
PUNCTUATOR          ,
STRING_LITERAL      "return"
PUNCTUATOR          ,
STRING_LITERAL      "short"
PUNCTUATOR          ,
STRING_LITERAL      "signed"
PUNCTUATOR          ,
STRING_LITERAL      "sizeof"
PUNCTUATOR          ,
STRING_LITERAL      "static"
PUNCTUATOR          ,
STRING_LITERAL      "struct"
PUNCTUATOR          ,
STRING_LITERAL      "switch"
PUNCTUATOR          ,
STRING_LITERAL      "typedef"
PUNCTUATOR          ,
STRING_LITERAL      "union"
PUNCTUATOR          ,
STRING_LITERAL      "unsigned"
PUNCTUATOR          ,
STRING_LITERAL      "void"
PUNCTUATOR          ,
STRING_LITERAL      "volatile"
PUNCTUATOR          ,
STRING_LITERAL      "while"
PUNCTUATOR          }
PUNCTUATOR          ;
KEYWORD             const
IDENTIFIER          size_t
IDENTIFIER          num_keywords
PUNCTUATOR          =
KEYWORD             sizeof
PUNCTUATOR          (
IDENTIFIER          keywords
PUNCTUATOR          )
PUNCTUATOR          /
KEYWORD             sizeof
PUNCTUATOR          (
IDENTIFIER          keywords
PUNCTUATOR          [
CONSTANT            0
PUNCTUATOR          ]
PUNCTUATOR          )
PUNCTUATOR          ;
KEYWORD             const
KEYWORD             char
PUNCTUATOR          *
IDENTIFIER          punctuators
PUNCTUATOR          =
STRING_LITERAL      "<>(){}[];=<>,+-*/:!&|.?%"
PUNCTUATOR          ;
KEYWORD             void
IDENTIFIER          printTokenData
PUNCTUATOR          (
IDENTIFIER          Token
PUNCTUATOR          *
IDENTIFIER          token
PUNCTUATOR          ,
KEYWORD             const
KEYWORD             char
PUNCTUATOR          *
IDENTIFIER          source
PUNCTUATOR          )
PUNCTUATOR          {
KEYWORD             const
KEYWORD             char
PUNCTUATOR          *
IDENTIFIER          type_str
PUNCTUATOR          =
STRING_LITERAL      "UNKNOWN"
PUNCTUATOR          ;
KEYWORD             switch
PUNCTUATOR          (
IDENTIFIER          token
PUNCTUATOR          -
PUNCTUATOR          >
IDENTIFIER          type
PUNCTUATOR          )
PUNCTUATOR          {
KEYWORD             case
IDENTIFIER          KEYWORD
PUNCTUATOR          :
IDENTIFIER          type_str
PUNCTUATOR          =
STRING_LITERAL      "KEYWORD"
PUNCTUATOR          ;
KEYWORD             break
PUNCTUATOR          ;
KEYWORD             case
IDENTIFIER          IDENTIFIER
PUNCTUATOR          :
IDENTIFIER          type_str
PUNCTUATOR          =
STRING_LITERAL      "IDENTIFIER"
PUNCTUATOR          ;
KEYWORD             break
PUNCTUATOR          ;
KEYWORD             case
IDENTIFIER          CONSTANT
PUNCTUATOR          :
IDENTIFIER          type_str
PUNCTUATOR          =
STRING_LITERAL      "CONSTANT"
PUNCTUATOR          ;
KEYWORD             break
PUNCTUATOR          ;
KEYWORD             case
IDENTIFIER          STRING_LITERAL
PUNCTUATOR          :
IDENTIFIER          type_str
PUNCTUATOR          =
STRING_LITERAL      "STRING_LITERAL"
PUNCTUATOR          ;
KEYWORD             break
PUNCTUATOR          ;
KEYWORD             case
IDENTIFIER          CHARACTER_CONSTANT
PUNCTUATOR          :
IDENTIFIER          type_str
PUNCTUATOR          =
STRING_LITERAL      "CHARACTER_CONSTANT"
PUNCTUATOR          ;
KEYWORD             break
PUNCTUATOR          ;
KEYWORD             case
IDENTIFIER          SINGLE_LINE_COMMENT
PUNCTUATOR          :
IDENTIFIER          type_str
PUNCTUATOR          =
STRING_LITERAL      "SINGLE_LINE_COMMENT"
PUNCTUATOR          ;
KEYWORD             break
PUNCTUATOR          ;
KEYWORD             case
IDENTIFIER          MULTI_LINE_COMMENT
PUNCTUATOR          :
IDENTIFIER          type_str
PUNCTUATOR          =
STRING_LITERAL      "MULTI_LINE_COMMENT"
PUNCTUATOR          ;
KEYWORD             break
PUNCTUATOR          ;
KEYWORD             case
IDENTIFIER          PUNCTUATOR
PUNCTUATOR          :
IDENTIFIER          type_str
PUNCTUATOR          =
STRING_LITERAL      "PUNCTUATOR"
PUNCTUATOR          ;
KEYWORD             break
PUNCTUATOR          ;
KEYWORD             default
PUNCTUATOR          :
KEYWORD             break
PUNCTUATOR          ;
PUNCTUATOR          }
IDENTIFIER          printf
PUNCTUATOR          (
STRING_LITERAL      "%-20s%.*s\n"
PUNCTUATOR          ,
IDENTIFIER          type_str
PUNCTUATOR          ,
IDENTIFIER          token
PUNCTUATOR          -
PUNCTUATOR          >
IDENTIFIER          end
PUNCTUATOR          -
IDENTIFIER          token
PUNCTUATOR          -
PUNCTUATOR          >
IDENTIFIER          start
PUNCTUATOR          ,
IDENTIFIER          source
PUNCTUATOR          +
IDENTIFIER          token
PUNCTUATOR          -
PUNCTUATOR          >
IDENTIFIER          start
PUNCTUATOR          )
PUNCTUATOR          ;
PUNCTUATOR          }
KEYWORD             void
IDENTIFIER          printHighlightedToken
PUNCTUATOR          (
IDENTIFIER          Token
PUNCTUATOR          *
IDENTIFIER          token
PUNCTUATOR          ,
KEYWORD             const
KEYWORD             char
PUNCTUATOR          *
IDENTIFIER          source
PUNCTUATOR          )
PUNCTUATOR          {
KEYWORD             const
KEYWORD             char
PUNCTUATOR          *
IDENTIFIER          color
PUNCTUATOR          =
IDENTIFIER          colorCodes
PUNCTUATOR          [
IDENTIFIER          token
PUNCTUATOR          -
PUNCTUATOR          >
IDENTIFIER          type
PUNCTUATOR          ]
PUNCTUATOR          ;
IDENTIFIER          printf
PUNCTUATOR          (
STRING_LITERAL      "%s%.*s\033[0m"
PUNCTUATOR          ,
IDENTIFIER          color
PUNCTUATOR          ,
IDENTIFIER          token
PUNCTUATOR          -
PUNCTUATOR          >
IDENTIFIER          end
PUNCTUATOR          -
IDENTIFIER          token
PUNCTUATOR          -
PUNCTUATOR          >
IDENTIFIER          start
PUNCTUATOR          ,
IDENTIFIER          source
PUNCTUATOR          +
IDENTIFIER          token
PUNCTUATOR          -
PUNCTUATOR          >
IDENTIFIER          start
PUNCTUATOR          )
PUNCTUATOR          ;
PUNCTUATOR          }
KEYWORD             int
IDENTIFIER          isKeyword
PUNCTUATOR          (
KEYWORD             const
KEYWORD             char
PUNCTUATOR          *
IDENTIFIER          value
PUNCTUATOR          )
PUNCTUATOR          {
KEYWORD             for
PUNCTUATOR          (
IDENTIFIER          size_t
IDENTIFIER          i
PUNCTUATOR          =
CONSTANT            0
PUNCTUATOR          ;
IDENTIFIER          i
PUNCTUATOR          <
IDENTIFIER          num_keywords
PUNCTUATOR          ;
IDENTIFIER          i
PUNCTUATOR          ++
PUNCTUATOR          )
PUNCTUATOR          {
KEYWORD             if
PUNCTUATOR          (
IDENTIFIER          strcmp
PUNCTUATOR          (
IDENTIFIER          value
PUNCTUATOR          ,
IDENTIFIER          keywords
PUNCTUATOR          [
IDENTIFIER          i
PUNCTUATOR          ]
PUNCTUATOR          )
PUNCTUATOR          ==
CONSTANT            0
PUNCTUATOR          )
PUNCTUATOR          {
KEYWORD             return
IDENTIFIER          true
PUNCTUATOR          ;
PUNCTUATOR          }
PUNCTUATOR          }
KEYWORD             return
IDENTIFIER          false
PUNCTUATOR          ;
PUNCTUATOR          }
IDENTIFIER          Token
PUNCTUATOR          *
IDENTIFIER          tokenize
PUNCTUATOR          (
KEYWORD             const
KEYWORD             char
PUNCTUATOR          *
IDENTIFIER          source
PUNCTUATOR          ,
KEYWORD             int
PUNCTUATOR          *
IDENTIFIER          numTokens
PUNCTUATOR          )
PUNCTUATOR          {
KEYWORD             int
IDENTIFIER          tokensCapacity
PUNCTUATOR          =
CONSTANT            100
PUNCTUATOR          ;
IDENTIFIER          Token
PUNCTUATOR          *
IDENTIFIER          tokens
PUNCTUATOR          =
IDENTIFIER          malloc
PUNCTUATOR          (
IDENTIFIER          tokensCapacity
PUNCTUATOR          *
KEYWORD             sizeof
PUNCTUATOR          (
IDENTIFIER          Token
PUNCTUATOR          )
PUNCTUATOR          )
PUNCTUATOR          ;
KEYWORD             int
IDENTIFIER          length
PUNCTUATOR          =
IDENTIFIER          strlen
PUNCTUATOR          (
IDENTIFIER          source
PUNCTUATOR          )
PUNCTUATOR          ;
KEYWORD             int
IDENTIFIER          index
PUNCTUATOR          =
CONSTANT            0
PUNCTUATOR          ;
KEYWORD             int
IDENTIFIER          start
PUNCTUATOR          =
CONSTANT            0
PUNCTUATOR          ;
KEYWORD             int
IDENTIFIER          currentIdx
PUNCTUATOR          =
CONSTANT            0
PUNCTUATOR          ;
KEYWORD             while
PUNCTUATOR          (
IDENTIFIER          index
PUNCTUATOR          <
IDENTIFIER          length
PUNCTUATOR          )
PUNCTUATOR          {
KEYWORD             char
IDENTIFIER          ch
PUNCTUATOR          =
IDENTIFIER          source
PUNCTUATOR          [
IDENTIFIER          index
PUNCTUATOR          ]
PUNCTUATOR          ;
KEYWORD             if
PUNCTUATOR          (
IDENTIFIER          isspace
PUNCTUATOR          (
IDENTIFIER          ch
PUNCTUATOR          )
PUNCTUATOR          )
PUNCTUATOR          {
IDENTIFIER          index
PUNCTUATOR          ++
PUNCTUATOR          ;
KEYWORD             continue
PUNCTUATOR          ;
PUNCTUATOR          }
IDENTIFIER          start
PUNCTUATOR          =
IDENTIFIER          index
PUNCTUATOR          ;
KEYWORD             if
PUNCTUATOR          (
IDENTIFIER          isalpha
PUNCTUATOR          (
IDENTIFIER          ch
PUNCTUATOR          )
PUNCTUATOR          |
PUNCTUATOR          |
IDENTIFIER          ch
PUNCTUATOR          ==
CHARACTER_CONSTANT  '_'
PUNCTUATOR          )
PUNCTUATOR          {
KEYWORD             do
PUNCTUATOR          {
IDENTIFIER          index
PUNCTUATOR          ++
PUNCTUATOR          ;
PUNCTUATOR          }
KEYWORD             while
PUNCTUATOR          (
IDENTIFIER          isalnum
PUNCTUATOR          (
IDENTIFIER          source
PUNCTUATOR          [
IDENTIFIER          index
PUNCTUATOR          ]
PUNCTUATOR          )
PUNCTUATOR          |
PUNCTUATOR          |
IDENTIFIER          source
PUNCTUATOR          [
IDENTIFIER          index
PUNCTUATOR          ]
PUNCTUATOR          ==
CHARACTER_CONSTANT  '_'
PUNCTUATOR          )
PUNCTUATOR          ;
IDENTIFIER          tokens
PUNCTUATOR          [
IDENTIFIER          currentIdx
PUNCTUATOR          ]
PUNCTUATOR          .
IDENTIFIER          start
PUNCTUATOR          =
IDENTIFIER          start
PUNCTUATOR          ;
IDENTIFIER          tokens
PUNCTUATOR          [
IDENTIFIER          currentIdx
PUNCTUATOR          ]
PUNCTUATOR          .
IDENTIFIER          end
PUNCTUATOR          =
IDENTIFIER          index
PUNCTUATOR          ;
KEYWORD             char
IDENTIFIER          value
PUNCTUATOR          [
CONSTANT            100
PUNCTUATOR          ]
PUNCTUATOR          ;
IDENTIFIER          snprintf
PUNCTUATOR          (
IDENTIFIER          value
PUNCTUATOR          ,
IDENTIFIER          index
PUNCTUATOR          -
IDENTIFIER          start
PUNCTUATOR          +
CONSTANT            1
PUNCTUATOR          ,
STRING_LITERAL      "%s"
PUNCTUATOR          ,
IDENTIFIER          source
PUNCTUATOR          +
IDENTIFIER          start
PUNCTUATOR          )
PUNCTUATOR          ;
IDENTIFIER          tokens
PUNCTUATOR          [
IDENTIFIER          currentIdx
PUNCTUATOR          ]
PUNCTUATOR          .
IDENTIFIER          type
PUNCTUATOR          =
IDENTIFIER          isKeyword
PUNCTUATOR          (
IDENTIFIER          value
PUNCTUATOR          )
PUNCTUATOR          ?
IDENTIFIER          KEYWORD
PUNCTUATOR          :
IDENTIFIER          IDENTIFIER
PUNCTUATOR          ;
PUNCTUATOR          }
KEYWORD             else
KEYWORD             if
PUNCTUATOR          (
IDENTIFIER          isdigit
PUNCTUATOR          (
IDENTIFIER          ch
PUNCTUATOR          )
PUNCTUATOR          )
PUNCTUATOR          {
KEYWORD             do
PUNCTUATOR          {
IDENTIFIER          index
PUNCTUATOR          ++
PUNCTUATOR          ;
PUNCTUATOR          }
KEYWORD             while
PUNCTUATOR          (
IDENTIFIER          isdigit
PUNCTUATOR          (
IDENTIFIER          source
PUNCTUATOR          [
IDENTIFIER          index
PUNCTUATOR          ]
PUNCTUATOR          )
PUNCTUATOR          )
PUNCTUATOR          ;
IDENTIFIER          tokens
PUNCTUATOR          [
IDENTIFIER          currentIdx
PUNCTUATOR          ]
PUNCTUATOR          .
IDENTIFIER          start
PUNCTUATOR          =
IDENTIFIER          start
PUNCTUATOR          ;
IDENTIFIER          tokens
PUNCTUATOR          [
IDENTIFIER          currentIdx
PUNCTUATOR          ]
PUNCTUATOR          .
IDENTIFIER          end
PUNCTUATOR          =
IDENTIFIER          index
PUNCTUATOR          ;
IDENTIFIER          tokens
PUNCTUATOR          [
IDENTIFIER          currentIdx
PUNCTUATOR          ]
PUNCTUATOR          .
IDENTIFIER          type
PUNCTUATOR          =
IDENTIFIER          CONSTANT
PUNCTUATOR          ;
PUNCTUATOR          }
KEYWORD             else
KEYWORD             if
PUNCTUATOR          (
IDENTIFIER          ch
PUNCTUATOR          ==
CHARACTER_CONSTANT  '"'
PUNCTUATOR          )
PUNCTUATOR          {
IDENTIFIER          index
PUNCTUATOR          ++
PUNCTUATOR          ;
KEYWORD             while
PUNCTUATOR          (
IDENTIFIER          source
PUNCTUATOR          [
IDENTIFIER          index
PUNCTUATOR          ]
PUNCTUATOR          !=
CHARACTER_CONSTANT  '"'
PUNCTUATOR          &
PUNCTUATOR          &
IDENTIFIER          index
PUNCTUATOR          <
IDENTIFIER          length
PUNCTUATOR          )
PUNCTUATOR          {
KEYWORD             if
PUNCTUATOR          (
IDENTIFIER          source
PUNCTUATOR          [
IDENTIFIER          index
PUNCTUATOR          ]
PUNCTUATOR          ==
CHARACTER_CONSTANT  '\\'
PUNCTUATOR          )
PUNCTUATOR          {
IDENTIFIER          index
PUNCTUATOR          ++
PUNCTUATOR          ;
PUNCTUATOR          }
IDENTIFIER          index
PUNCTUATOR          ++
PUNCTUATOR          ;
PUNCTUATOR          }
KEYWORD             if
PUNCTUATOR          (
IDENTIFIER          source
PUNCTUATOR          [
IDENTIFIER          index
PUNCTUATOR          ]
PUNCTUATOR          ==
CHARACTER_CONSTANT  '"'
PUNCTUATOR          )
PUNCTUATOR          {
IDENTIFIER          index
PUNCTUATOR          ++
PUNCTUATOR          ;
PUNCTUATOR          }
IDENTIFIER          tokens
PUNCTUATOR          [
IDENTIFIER          currentIdx
PUNCTUATOR          ]
PUNCTUATOR          .
IDENTIFIER          start
PUNCTUATOR          =
IDENTIFIER          start
PUNCTUATOR          ;
IDENTIFIER          tokens
PUNCTUATOR          [
IDENTIFIER          currentIdx
PUNCTUATOR          ]
PUNCTUATOR          .
IDENTIFIER          end
PUNCTUATOR          =
IDENTIFIER          index
PUNCTUATOR          ;
IDENTIFIER          tokens
PUNCTUATOR          [
IDENTIFIER          currentIdx
PUNCTUATOR          ]
PUNCTUATOR          .
IDENTIFIER          type
PUNCTUATOR          =
IDENTIFIER          STRING_LITERAL
PUNCTUATOR          ;
PUNCTUATOR          }
KEYWORD             else
KEYWORD             if
PUNCTUATOR          (
IDENTIFIER          ch
PUNCTUATOR          ==
CHARACTER_CONSTANT  '\''
PUNCTUATOR          )
PUNCTUATOR          {
IDENTIFIER          index
PUNCTUATOR          ++
PUNCTUATOR          ;
KEYWORD             while
PUNCTUATOR          (
IDENTIFIER          source
PUNCTUATOR          [
IDENTIFIER          index
PUNCTUATOR          ]
PUNCTUATOR          !=
CHARACTER_CONSTANT  '\''
PUNCTUATOR          &
PUNCTUATOR          &
IDENTIFIER          index
PUNCTUATOR          <
IDENTIFIER          length
PUNCTUATOR          )
PUNCTUATOR          {
KEYWORD             if
PUNCTUATOR          (
IDENTIFIER          source
PUNCTUATOR          [
IDENTIFIER          index
PUNCTUATOR          ]
PUNCTUATOR          ==
CHARACTER_CONSTANT  '\\'
PUNCTUATOR          )
PUNCTUATOR          {
IDENTIFIER          index
PUNCTUATOR          ++
PUNCTUATOR          ;
PUNCTUATOR          }
IDENTIFIER          index
PUNCTUATOR          ++
PUNCTUATOR          ;
PUNCTUATOR          }
KEYWORD             if
PUNCTUATOR          (
IDENTIFIER          source
PUNCTUATOR          [
IDENTIFIER          index
PUNCTUATOR          ]
PUNCTUATOR          ==
CHARACTER_CONSTANT  '\''
PUNCTUATOR          )
PUNCTUATOR          {
IDENTIFIER          index
PUNCTUATOR          ++
PUNCTUATOR          ;
PUNCTUATOR          }
IDENTIFIER          tokens
PUNCTUATOR          [
IDENTIFIER          currentIdx
PUNCTUATOR          ]
PUNCTUATOR          .
IDENTIFIER          start
PUNCTUATOR          =
IDENTIFIER          start
PUNCTUATOR          ;
IDENTIFIER          tokens
PUNCTUATOR          [
IDENTIFIER          currentIdx
PUNCTUATOR          ]
PUNCTUATOR          .
IDENTIFIER          end
PUNCTUATOR          =
IDENTIFIER          index
PUNCTUATOR          ;
IDENTIFIER          tokens
PUNCTUATOR          [
IDENTIFIER          currentIdx
PUNCTUATOR          ]
PUNCTUATOR          .
IDENTIFIER          type
PUNCTUATOR          =
IDENTIFIER          CHARACTER_CONSTANT
PUNCTUATOR          ;
PUNCTUATOR          }
KEYWORD             else
KEYWORD             if
PUNCTUATOR          (
IDENTIFIER          ch
PUNCTUATOR          ==
CHARACTER_CONSTANT  '/'
PUNCTUATOR          &
PUNCTUATOR          &
IDENTIFIER          source
PUNCTUATOR          [
IDENTIFIER          index
PUNCTUATOR          +
CONSTANT            1
PUNCTUATOR          ]
PUNCTUATOR          ==
CHARACTER_CONSTANT  '/'
PUNCTUATOR          )
PUNCTUATOR          {
IDENTIFIER          index
PUNCTUATOR          +=
CONSTANT            2
PUNCTUATOR          ;
KEYWORD             while
PUNCTUATOR          (
IDENTIFIER          source
PUNCTUATOR          [
IDENTIFIER          index
PUNCTUATOR          ]
PUNCTUATOR          !=
CHARACTER_CONSTANT  '\n'
PUNCTUATOR          &
PUNCTUATOR          &
IDENTIFIER          index
PUNCTUATOR          <
IDENTIFIER          length
PUNCTUATOR          )
PUNCTUATOR          {
IDENTIFIER          index
PUNCTUATOR          ++
PUNCTUATOR          ;
PUNCTUATOR          }
IDENTIFIER          tokens
PUNCTUATOR          [
IDENTIFIER          currentIdx
PUNCTUATOR          ]
PUNCTUATOR          .
IDENTIFIER          start
PUNCTUATOR          =
IDENTIFIER          start
PUNCTUATOR          ;
IDENTIFIER          tokens
PUNCTUATOR          [
IDENTIFIER          currentIdx
PUNCTUATOR          ]
PUNCTUATOR          .
IDENTIFIER          end
PUNCTUATOR          =
IDENTIFIER          index
PUNCTUATOR          ;
IDENTIFIER          tokens
PUNCTUATOR          [
IDENTIFIER          currentIdx
PUNCTUATOR          ]
PUNCTUATOR          .
IDENTIFIER          type
PUNCTUATOR          =
IDENTIFIER          SINGLE_LINE_COMMENT
PUNCTUATOR          ;
PUNCTUATOR          }
KEYWORD             else
KEYWORD             if
PUNCTUATOR          (
IDENTIFIER          ch
PUNCTUATOR          ==
CHARACTER_CONSTANT  '/'
PUNCTUATOR          &
PUNCTUATOR          &
IDENTIFIER          source
PUNCTUATOR          [
IDENTIFIER          index
PUNCTUATOR          +
CONSTANT            1
PUNCTUATOR          ]
PUNCTUATOR          ==
CHARACTER_CONSTANT  '*'
PUNCTUATOR          )
PUNCTUATOR          {
IDENTIFIER          index
PUNCTUATOR          +=
CONSTANT            2
PUNCTUATOR          ;
KEYWORD             while
PUNCTUATOR          (
IDENTIFIER          index
PUNCTUATOR          <
IDENTIFIER          length
PUNCTUATOR          )
PUNCTUATOR          {
IDENTIFIER          index
PUNCTUATOR          ++
PUNCTUATOR          ;
KEYWORD             if
PUNCTUATOR          (
IDENTIFIER          source
PUNCTUATOR          [
IDENTIFIER          index
PUNCTUATOR          ]
PUNCTUATOR          ==
CHARACTER_CONSTANT  '*'
PUNCTUATOR          &
PUNCTUATOR          &
IDENTIFIER          source
PUNCTUATOR          [
IDENTIFIER          index
PUNCTUATOR          +
CONSTANT            1
PUNCTUATOR          ]
PUNCTUATOR          ==
CHARACTER_CONSTANT  '/'
PUNCTUATOR          )
PUNCTUATOR          {
IDENTIFIER          index
PUNCTUATOR          +=
CONSTANT            2
PUNCTUATOR          ;
KEYWORD             break
PUNCTUATOR          ;
PUNCTUATOR          }
PUNCTUATOR          }
IDENTIFIER          tokens
PUNCTUATOR          [
IDENTIFIER          currentIdx
PUNCTUATOR          ]
PUNCTUATOR          .
IDENTIFIER          start
PUNCTUATOR          =
IDENTIFIER          start
PUNCTUATOR          ;
IDENTIFIER          tokens
PUNCTUATOR          [
IDENTIFIER          currentIdx
PUNCTUATOR          ]
PUNCTUATOR          .
IDENTIFIER          end
PUNCTUATOR          =
IDENTIFIER          index
PUNCTUATOR          ;
IDENTIFIER          tokens
PUNCTUATOR          [
IDENTIFIER          currentIdx
PUNCTUATOR          ]
PUNCTUATOR          .
IDENTIFIER          type
PUNCTUATOR          =
IDENTIFIER          MULTI_LINE_COMMENT
PUNCTUATOR          ;
PUNCTUATOR          }
KEYWORD             else
KEYWORD             if
PUNCTUATOR          (
IDENTIFIER          strchr
PUNCTUATOR          (
IDENTIFIER          punctuators
PUNCTUATOR          ,
IDENTIFIER          ch
PUNCTUATOR          )
PUNCTUATOR          !=
IDENTIFIER          NULL
PUNCTUATOR          )
PUNCTUATOR          {
IDENTIFIER          index
PUNCTUATOR          ++
PUNCTUATOR          ;
IDENTIFIER          tokens
PUNCTUATOR          [
IDENTIFIER          currentIdx
PUNCTUATOR          ]
PUNCTUATOR          .
IDENTIFIER          start
PUNCTUATOR          =
IDENTIFIER          start
PUNCTUATOR          ;
IDENTIFIER          tokens
PUNCTUATOR          [
IDENTIFIER          currentIdx
PUNCTUATOR          ]
PUNCTUATOR          .
IDENTIFIER          end
PUNCTUATOR          =
IDENTIFIER          index
PUNCTUATOR          ;
IDENTIFIER          tokens
PUNCTUATOR          [
IDENTIFIER          currentIdx
PUNCTUATOR          ]
PUNCTUATOR          .
IDENTIFIER          type
PUNCTUATOR          =
IDENTIFIER          PUNCTUATOR
PUNCTUATOR          ;
SINGLE_LINE_COMMENT // TODO: Handle compound punctuators separately
KEYWORD             if
PUNCTUATOR          (
PUNCTUATOR          (
IDENTIFIER          ch
PUNCTUATOR          ==
CHARACTER_CONSTANT  '+'
PUNCTUATOR          &
PUNCTUATOR          &
IDENTIFIER          source
PUNCTUATOR          [
IDENTIFIER          index
PUNCTUATOR          ]
PUNCTUATOR          ==
CHARACTER_CONSTANT  '+'
PUNCTUATOR          )
PUNCTUATOR          |
PUNCTUATOR          |
PUNCTUATOR          (
IDENTIFIER          source
PUNCTUATOR          [
IDENTIFIER          index
PUNCTUATOR          ]
PUNCTUATOR          ==
CHARACTER_CONSTANT  '='
PUNCTUATOR          )
PUNCTUATOR          )
PUNCTUATOR          {
IDENTIFIER          index
PUNCTUATOR          ++
PUNCTUATOR          ;
IDENTIFIER          tokens
PUNCTUATOR          [
IDENTIFIER          currentIdx
PUNCTUATOR          ]
PUNCTUATOR          .
IDENTIFIER          end
PUNCTUATOR          =
IDENTIFIER          index
PUNCTUATOR          ;
PUNCTUATOR          }
PUNCTUATOR          }
KEYWORD             else
PUNCTUATOR          {
IDENTIFIER          index
PUNCTUATOR          ++
PUNCTUATOR          ;
IDENTIFIER          tokens
PUNCTUATOR          [
IDENTIFIER          currentIdx
PUNCTUATOR          ]
PUNCTUATOR          .
IDENTIFIER          start
PUNCTUATOR          =
IDENTIFIER          start
PUNCTUATOR          ;
IDENTIFIER          tokens
PUNCTUATOR          [
IDENTIFIER          currentIdx
PUNCTUATOR          ]
PUNCTUATOR          .
IDENTIFIER          end
PUNCTUATOR          =
IDENTIFIER          index
PUNCTUATOR          ;
IDENTIFIER          tokens
PUNCTUATOR          [
IDENTIFIER          currentIdx
PUNCTUATOR          ]
PUNCTUATOR          .
IDENTIFIER          type
PUNCTUATOR          =
IDENTIFIER          UNKNOWN
PUNCTUATOR          ;
PUNCTUATOR          }
IDENTIFIER          currentIdx
PUNCTUATOR          ++
PUNCTUATOR          ;
PUNCTUATOR          *
IDENTIFIER          numTokens
PUNCTUATOR          =
IDENTIFIER          currentIdx
PUNCTUATOR          ;
KEYWORD             if
PUNCTUATOR          (
IDENTIFIER          currentIdx
PUNCTUATOR          >=
IDENTIFIER          tokensCapacity
PUNCTUATOR          )
PUNCTUATOR          {
IDENTIFIER          tokensCapacity
PUNCTUATOR          *=
CONSTANT            2
PUNCTUATOR          ;
IDENTIFIER          tokens
PUNCTUATOR          =
IDENTIFIER          realloc
PUNCTUATOR          (
IDENTIFIER          tokens
PUNCTUATOR          ,
IDENTIFIER          tokensCapacity
PUNCTUATOR          *
KEYWORD             sizeof
PUNCTUATOR          (
IDENTIFIER          Token
PUNCTUATOR          )
PUNCTUATOR          )
PUNCTUATOR          ;
PUNCTUATOR          }
PUNCTUATOR          }
KEYWORD             return
IDENTIFIER          tokens
PUNCTUATOR          ;
PUNCTUATOR          }
KEYWORD             void
IDENTIFIER          printUsage
PUNCTUATOR          (
KEYWORD             const
KEYWORD             char
PUNCTUATOR          *
IDENTIFIER          programName
PUNCTUATOR          )
PUNCTUATOR          {
IDENTIFIER          printf
PUNCTUATOR          (
STRING_LITERAL      "Usage: %s [options] <filename>\n"
PUNCTUATOR          ,
IDENTIFIER          programName
PUNCTUATOR          )
PUNCTUATOR          ;
IDENTIFIER          printf
PUNCTUATOR          (
STRING_LITERAL      "Options:\n"
PUNCTUATOR          )
PUNCTUATOR          ;
IDENTIFIER          printf
PUNCTUATOR          (
STRING_LITERAL      "  -h, --help\t\tPrint this message\n"
PUNCTUATOR          )
PUNCTUATOR          ;
IDENTIFIER          printf
PUNCTUATOR          (
STRING_LITERAL      "  -i  --highlight\tPrint out highlighted source code\n"
PUNCTUATOR          )
PUNCTUATOR          ;
PUNCTUATOR          }
KEYWORD             int
IDENTIFIER          main
PUNCTUATOR          (
KEYWORD             int
IDENTIFIER          argc
PUNCTUATOR          ,
KEYWORD             char
PUNCTUATOR          *
IDENTIFIER          argv
PUNCTUATOR          [
PUNCTUATOR          ]
PUNCTUATOR          )
PUNCTUATOR          {
KEYWORD             if
PUNCTUATOR          (
IDENTIFIER          argc
PUNCTUATOR          <
CONSTANT            2
PUNCTUATOR          )
PUNCTUATOR          {
IDENTIFIER          printUsage
PUNCTUATOR          (
IDENTIFIER          argv
PUNCTUATOR          [
CONSTANT            0
PUNCTUATOR          ]
PUNCTUATOR          )
PUNCTUATOR          ;
KEYWORD             return
CONSTANT            1
PUNCTUATOR          ;
PUNCTUATOR          }
KEYWORD             char
PUNCTUATOR          *
IDENTIFIER          filename
PUNCTUATOR          =
IDENTIFIER          NULL
PUNCTUATOR          ;
IDENTIFIER          bool
IDENTIFIER          highlight
PUNCTUATOR          =
IDENTIFIER          false
PUNCTUATOR          ;
KEYWORD             for
PUNCTUATOR          (
KEYWORD             int
IDENTIFIER          i
PUNCTUATOR          =
CONSTANT            1
PUNCTUATOR          ;
IDENTIFIER          i
PUNCTUATOR          <
IDENTIFIER          argc
PUNCTUATOR          ;
IDENTIFIER          i
PUNCTUATOR          ++
PUNCTUATOR          )
PUNCTUATOR          {
KEYWORD             if
PUNCTUATOR          (
IDENTIFIER          strcmp
PUNCTUATOR          (
IDENTIFIER          argv
PUNCTUATOR          [
IDENTIFIER          i
PUNCTUATOR          ]
PUNCTUATOR          ,
STRING_LITERAL      "-h"
PUNCTUATOR          )
PUNCTUATOR          ==
CONSTANT            0
PUNCTUATOR          |
PUNCTUATOR          |
IDENTIFIER          strcmp
PUNCTUATOR          (
IDENTIFIER          argv
PUNCTUATOR          [
IDENTIFIER          i
PUNCTUATOR          ]
PUNCTUATOR          ,
STRING_LITERAL      "--help"
PUNCTUATOR          )
PUNCTUATOR          ==
CONSTANT            0
PUNCTUATOR          )
PUNCTUATOR          {
IDENTIFIER          printUsage
PUNCTUATOR          (
IDENTIFIER          argv
PUNCTUATOR          [
CONSTANT            0
PUNCTUATOR          ]
PUNCTUATOR          )
PUNCTUATOR          ;
KEYWORD             return
CONSTANT            0
PUNCTUATOR          ;
PUNCTUATOR          }
KEYWORD             else
KEYWORD             if
PUNCTUATOR          (
IDENTIFIER          strcmp
PUNCTUATOR          (
IDENTIFIER          argv
PUNCTUATOR          [
IDENTIFIER          i
PUNCTUATOR          ]
PUNCTUATOR          ,
STRING_LITERAL      "-i"
PUNCTUATOR          )
PUNCTUATOR          ==
CONSTANT            0
PUNCTUATOR          |
PUNCTUATOR          |
IDENTIFIER          strcmp
PUNCTUATOR          (
IDENTIFIER          argv
PUNCTUATOR          [
IDENTIFIER          i
PUNCTUATOR          ]
PUNCTUATOR          ,
STRING_LITERAL      "--highlight"
PUNCTUATOR          )
PUNCTUATOR          ==
CONSTANT            0
PUNCTUATOR          )
PUNCTUATOR          {
IDENTIFIER          highlight
PUNCTUATOR          =
IDENTIFIER          true
PUNCTUATOR          ;
PUNCTUATOR          }
KEYWORD             else
PUNCTUATOR          {
IDENTIFIER          filename
PUNCTUATOR          =
IDENTIFIER          argv
PUNCTUATOR          [
IDENTIFIER          i
PUNCTUATOR          ]
PUNCTUATOR          ;
PUNCTUATOR          }
PUNCTUATOR          }
KEYWORD             if
PUNCTUATOR          (
IDENTIFIER          filename
PUNCTUATOR          )
PUNCTUATOR          {
IDENTIFIER          FILE
PUNCTUATOR          *
IDENTIFIER          fp
PUNCTUATOR          =
IDENTIFIER          fopen
PUNCTUATOR          (
IDENTIFIER          filename
PUNCTUATOR          ,
STRING_LITERAL      "r"
PUNCTUATOR          )
PUNCTUATOR          ;
KEYWORD             if
PUNCTUATOR          (
PUNCTUATOR          !
IDENTIFIER          fp
PUNCTUATOR          )
PUNCTUATOR          {
IDENTIFIER          fprintf
PUNCTUATOR          (
IDENTIFIER          stderr
PUNCTUATOR          ,
STRING_LITERAL      "Could not open file %s\n"
PUNCTUATOR          ,
IDENTIFIER          filename
PUNCTUATOR          )
PUNCTUATOR          ;
KEYWORD             return
CONSTANT            1
PUNCTUATOR          ;
PUNCTUATOR          }
IDENTIFIER          fseek
PUNCTUATOR          (
IDENTIFIER          fp
PUNCTUATOR          ,
CONSTANT            0
PUNCTUATOR          ,
IDENTIFIER          SEEK_END
PUNCTUATOR          )
PUNCTUATOR          ;
KEYWORD             long
IDENTIFIER          fsize
PUNCTUATOR          =
IDENTIFIER          ftell
PUNCTUATOR          (
IDENTIFIER          fp
PUNCTUATOR          )
PUNCTUATOR          ;
IDENTIFIER          fseek
PUNCTUATOR          (
IDENTIFIER          fp
PUNCTUATOR          ,
CONSTANT            0
PUNCTUATOR          ,
IDENTIFIER          SEEK_SET
PUNCTUATOR          )
PUNCTUATOR          ;
KEYWORD             char
PUNCTUATOR          *
IDENTIFIER          source
PUNCTUATOR          =
IDENTIFIER          malloc
PUNCTUATOR          (
IDENTIFIER          fsize
PUNCTUATOR          +
CONSTANT            1
PUNCTUATOR          )
PUNCTUATOR          ;
IDENTIFIER          fread
PUNCTUATOR          (
IDENTIFIER          source
PUNCTUATOR          ,
CONSTANT            1
PUNCTUATOR          ,
IDENTIFIER          fsize
PUNCTUATOR          ,
IDENTIFIER          fp
PUNCTUATOR          )
PUNCTUATOR          ;
IDENTIFIER          source
PUNCTUATOR          [
IDENTIFIER          fsize
PUNCTUATOR          ]
PUNCTUATOR          =
CHARACTER_CONSTANT  '\0'
PUNCTUATOR          ;
IDENTIFIER          fclose
PUNCTUATOR          (
IDENTIFIER          fp
PUNCTUATOR          )
PUNCTUATOR          ;
KEYWORD             int
IDENTIFIER          numTokens
PUNCTUATOR          =
CONSTANT            0
PUNCTUATOR          ;
IDENTIFIER          Token
PUNCTUATOR          *
IDENTIFIER          tokens
PUNCTUATOR          =
IDENTIFIER          tokenize
PUNCTUATOR          (
IDENTIFIER          source
PUNCTUATOR          ,
PUNCTUATOR          &
IDENTIFIER          numTokens
PUNCTUATOR          )
PUNCTUATOR          ;
KEYWORD             if
PUNCTUATOR          (
IDENTIFIER          highlight
PUNCTUATOR          )
PUNCTUATOR          {
KEYWORD             for
PUNCTUATOR          (
KEYWORD             int
IDENTIFIER          i
PUNCTUATOR          =
CONSTANT            0
PUNCTUATOR          ;
IDENTIFIER          i
PUNCTUATOR          <
IDENTIFIER          numTokens
PUNCTUATOR          ;
IDENTIFIER          i
PUNCTUATOR          ++
PUNCTUATOR          )
PUNCTUATOR          {
KEYWORD             if
PUNCTUATOR          (
IDENTIFIER          i
PUNCTUATOR          >
CONSTANT            0
PUNCTUATOR          )
PUNCTUATOR          {
IDENTIFIER          Token
PUNCTUATOR          *
IDENTIFIER          prev
PUNCTUATOR          =
PUNCTUATOR          &
IDENTIFIER          tokens
PUNCTUATOR          [
IDENTIFIER          i
PUNCTUATOR          -
CONSTANT            1
PUNCTUATOR          ]
PUNCTUATOR          ;
IDENTIFIER          Token
PUNCTUATOR          *
IDENTIFIER          current
PUNCTUATOR          =
PUNCTUATOR          &
IDENTIFIER          tokens
PUNCTUATOR          [
IDENTIFIER          i
PUNCTUATOR          ]
PUNCTUATOR          ;
IDENTIFIER          fwrite
PUNCTUATOR          (
IDENTIFIER          source
PUNCTUATOR          +
IDENTIFIER          prev
PUNCTUATOR          -
PUNCTUATOR          >
IDENTIFIER          end
PUNCTUATOR          ,
CONSTANT            1
PUNCTUATOR          ,
IDENTIFIER          current
PUNCTUATOR          -
PUNCTUATOR          >
IDENTIFIER          start
PUNCTUATOR          -
IDENTIFIER          prev
PUNCTUATOR          -
PUNCTUATOR          >
IDENTIFIER          end
PUNCTUATOR          ,
IDENTIFIER          stdout
PUNCTUATOR          )
PUNCTUATOR          ;
PUNCTUATOR          }
IDENTIFIER          printHighlightedToken
PUNCTUATOR          (
PUNCTUATOR          &
IDENTIFIER          tokens
PUNCTUATOR          [
IDENTIFIER          i
PUNCTUATOR          ]
PUNCTUATOR          ,
IDENTIFIER          source
PUNCTUATOR          )
PUNCTUATOR          ;
PUNCTUATOR          }
PUNCTUATOR          }
KEYWORD             else
PUNCTUATOR          {
KEYWORD             for
PUNCTUATOR          (
KEYWORD             int
IDENTIFIER          i
PUNCTUATOR          =
CONSTANT            0
PUNCTUATOR          ;
IDENTIFIER          i
PUNCTUATOR          <
IDENTIFIER          numTokens
PUNCTUATOR          ;
IDENTIFIER          i
PUNCTUATOR          ++
PUNCTUATOR          )
PUNCTUATOR          {
IDENTIFIER          printTokenData
PUNCTUATOR          (
PUNCTUATOR          &
IDENTIFIER          tokens
PUNCTUATOR          [
IDENTIFIER          i
PUNCTUATOR          ]
PUNCTUATOR          ,
IDENTIFIER          source
PUNCTUATOR          )
PUNCTUATOR          ;
PUNCTUATOR          }
PUNCTUATOR          }
IDENTIFIER          free
PUNCTUATOR          (
IDENTIFIER          tokens
PUNCTUATOR          )
PUNCTUATOR          ;
IDENTIFIER          free
PUNCTUATOR          (
IDENTIFIER          source
PUNCTUATOR          )
PUNCTUATOR          ;
PUNCTUATOR          }
PUNCTUATOR          }
