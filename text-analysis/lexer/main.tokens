UNKNOWN             #
IDENTIFIER          include
PUNCTUATOR          <
IDENTIFIER          ctype
PUNCTUATOR          .
IDENTIFIER          h
PUNCTUATOR          >
UNKNOWN             #
IDENTIFIER          include
PUNCTUATOR          <
IDENTIFIER          stdbool
PUNCTUATOR          .
IDENTIFIER          h
PUNCTUATOR          >
UNKNOWN             #
IDENTIFIER          include
PUNCTUATOR          <
IDENTIFIER          stdio
PUNCTUATOR          .
IDENTIFIER          h
PUNCTUATOR          >
UNKNOWN             #
IDENTIFIER          include
PUNCTUATOR          <
IDENTIFIER          stdlib
PUNCTUATOR          .
IDENTIFIER          h
PUNCTUATOR          >
UNKNOWN             #
IDENTIFIER          include
PUNCTUATOR          <
IDENTIFIER          string
PUNCTUATOR          .
IDENTIFIER          h
PUNCTUATOR          >
IDENTIFIER          typedef
IDENTIFIER          enum
PUNCTUATOR          {
IDENTIFIER          KEYWORD
PUNCTUATOR          ,
IDENTIFIER          IDENTIFIER
PUNCTUATOR          ,
IDENTIFIER          CONSTANT
PUNCTUATOR          ,
IDENTIFIER          STRING_LITERAL
PUNCTUATOR          ,
IDENTIFIER          CHARACTER_CONSTANT
PUNCTUATOR          ,
IDENTIFIER          SINGLE_LINE_COMMENT
PUNCTUATOR          ,
IDENTIFIER          PUNCTUATOR
PUNCTUATOR          ,
IDENTIFIER          UNKNOWN
PUNCTUATOR          }
IDENTIFIER          TokenType
PUNCTUATOR          ;
IDENTIFIER          typedef
IDENTIFIER          struct
PUNCTUATOR          {
IDENTIFIER          TokenType
IDENTIFIER          type
PUNCTUATOR          ;
KEYWORD             int
IDENTIFIER          start
PUNCTUATOR          ;
KEYWORD             int
IDENTIFIER          end
PUNCTUATOR          ;
PUNCTUATOR          }
IDENTIFIER          Token
PUNCTUATOR          ;
IDENTIFIER          const
IDENTIFIER          char
PUNCTUATOR          *
IDENTIFIER          keywords
PUNCTUATOR          [
PUNCTUATOR          ]
PUNCTUATOR          =
PUNCTUATOR          {
STRING_LITERAL      "int"
PUNCTUATOR          ,
STRING_LITERAL      "for"
PUNCTUATOR          ,
STRING_LITERAL      "if"
PUNCTUATOR          ,
STRING_LITERAL      "else"
PUNCTUATOR          ,
STRING_LITERAL      "while"
PUNCTUATOR          ,
STRING_LITERAL      "return"
PUNCTUATOR          }
PUNCTUATOR          ;
IDENTIFIER          const
IDENTIFIER          size_t
IDENTIFIER          num_keywords
PUNCTUATOR          =
IDENTIFIER          sizeof
PUNCTUATOR          (
IDENTIFIER          keywords
PUNCTUATOR          )
PUNCTUATOR          /
IDENTIFIER          sizeof
PUNCTUATOR          (
IDENTIFIER          keywords
PUNCTUATOR          [
CONSTANT            0
PUNCTUATOR          ]
PUNCTUATOR          )
PUNCTUATOR          ;
IDENTIFIER          const
IDENTIFIER          char
PUNCTUATOR          *
IDENTIFIER          punctuators
PUNCTUATOR          =
STRING_LITERAL      "<>(){}[];=<>,+-*/:!&|.?%"
PUNCTUATOR          ;
IDENTIFIER          void
IDENTIFIER          printToken
PUNCTUATOR          (
IDENTIFIER          Token
PUNCTUATOR          *
IDENTIFIER          token
PUNCTUATOR          ,
IDENTIFIER          const
IDENTIFIER          char
PUNCTUATOR          *
IDENTIFIER          source
PUNCTUATOR          )
PUNCTUATOR          {
IDENTIFIER          const
IDENTIFIER          char
PUNCTUATOR          *
IDENTIFIER          type_str
PUNCTUATOR          =
STRING_LITERAL      "UNKNOWN"
PUNCTUATOR          ;
IDENTIFIER          switch
PUNCTUATOR          (
IDENTIFIER          token
PUNCTUATOR          -
PUNCTUATOR          >
IDENTIFIER          type
PUNCTUATOR          )
PUNCTUATOR          {
IDENTIFIER          case
IDENTIFIER          KEYWORD
PUNCTUATOR          :
IDENTIFIER          type_str
PUNCTUATOR          =
STRING_LITERAL      "KEYWORD"
PUNCTUATOR          ;
IDENTIFIER          break
PUNCTUATOR          ;
IDENTIFIER          case
IDENTIFIER          IDENTIFIER
PUNCTUATOR          :
IDENTIFIER          type_str
PUNCTUATOR          =
STRING_LITERAL      "IDENTIFIER"
PUNCTUATOR          ;
IDENTIFIER          break
PUNCTUATOR          ;
IDENTIFIER          case
IDENTIFIER          CONSTANT
PUNCTUATOR          :
IDENTIFIER          type_str
PUNCTUATOR          =
STRING_LITERAL      "CONSTANT"
PUNCTUATOR          ;
IDENTIFIER          break
PUNCTUATOR          ;
IDENTIFIER          case
IDENTIFIER          STRING_LITERAL
PUNCTUATOR          :
IDENTIFIER          type_str
PUNCTUATOR          =
STRING_LITERAL      "STRING_LITERAL"
PUNCTUATOR          ;
IDENTIFIER          break
PUNCTUATOR          ;
IDENTIFIER          case
IDENTIFIER          CHARACTER_CONSTANT
PUNCTUATOR          :
IDENTIFIER          type_str
PUNCTUATOR          =
STRING_LITERAL      "CHARACTER_CONSTANT"
PUNCTUATOR          ;
IDENTIFIER          break
PUNCTUATOR          ;
IDENTIFIER          case
IDENTIFIER          SINGLE_LINE_COMMENT
PUNCTUATOR          :
IDENTIFIER          type_str
PUNCTUATOR          =
STRING_LITERAL      "SINGLE_LINE_COMMENT"
PUNCTUATOR          ;
IDENTIFIER          break
PUNCTUATOR          ;
IDENTIFIER          case
IDENTIFIER          PUNCTUATOR
PUNCTUATOR          :
IDENTIFIER          type_str
PUNCTUATOR          =
STRING_LITERAL      "PUNCTUATOR"
PUNCTUATOR          ;
IDENTIFIER          break
PUNCTUATOR          ;
IDENTIFIER          default
PUNCTUATOR          :
IDENTIFIER          break
PUNCTUATOR          ;
PUNCTUATOR          }
IDENTIFIER          printf
PUNCTUATOR          (
STRING_LITERAL      "%-20s%.*s\n"
PUNCTUATOR          ,
IDENTIFIER          type_str
PUNCTUATOR          ,
IDENTIFIER          token
PUNCTUATOR          -
PUNCTUATOR          >
IDENTIFIER          end
PUNCTUATOR          -
IDENTIFIER          token
PUNCTUATOR          -
PUNCTUATOR          >
IDENTIFIER          start
PUNCTUATOR          ,
IDENTIFIER          source
PUNCTUATOR          +
IDENTIFIER          token
PUNCTUATOR          -
PUNCTUATOR          >
IDENTIFIER          start
PUNCTUATOR          )
PUNCTUATOR          ;
PUNCTUATOR          }
KEYWORD             int
IDENTIFIER          isKeyword
PUNCTUATOR          (
IDENTIFIER          const
IDENTIFIER          char
PUNCTUATOR          *
IDENTIFIER          value
PUNCTUATOR          )
PUNCTUATOR          {
KEYWORD             for
PUNCTUATOR          (
IDENTIFIER          size_t
IDENTIFIER          i
PUNCTUATOR          =
CONSTANT            0
PUNCTUATOR          ;
IDENTIFIER          i
PUNCTUATOR          <
IDENTIFIER          num_keywords
PUNCTUATOR          ;
IDENTIFIER          i
PUNCTUATOR          ++
PUNCTUATOR          )
PUNCTUATOR          {
KEYWORD             if
PUNCTUATOR          (
IDENTIFIER          strcmp
PUNCTUATOR          (
IDENTIFIER          value
PUNCTUATOR          ,
IDENTIFIER          keywords
PUNCTUATOR          [
IDENTIFIER          i
PUNCTUATOR          ]
PUNCTUATOR          )
PUNCTUATOR          ==
CONSTANT            0
PUNCTUATOR          )
PUNCTUATOR          {
KEYWORD             return
IDENTIFIER          true
PUNCTUATOR          ;
PUNCTUATOR          }
PUNCTUATOR          }
KEYWORD             return
IDENTIFIER          false
PUNCTUATOR          ;
PUNCTUATOR          }
IDENTIFIER          void
IDENTIFIER          tokenize
PUNCTUATOR          (
IDENTIFIER          const
IDENTIFIER          char
PUNCTUATOR          *
IDENTIFIER          source
PUNCTUATOR          )
PUNCTUATOR          {
KEYWORD             int
IDENTIFIER          length
PUNCTUATOR          =
IDENTIFIER          strlen
PUNCTUATOR          (
IDENTIFIER          source
PUNCTUATOR          )
PUNCTUATOR          ;
IDENTIFIER          Token
IDENTIFIER          currentToken
PUNCTUATOR          ;
KEYWORD             int
IDENTIFIER          index
PUNCTUATOR          =
CONSTANT            0
PUNCTUATOR          ;
KEYWORD             int
IDENTIFIER          start
PUNCTUATOR          =
CONSTANT            0
PUNCTUATOR          ;
KEYWORD             while
PUNCTUATOR          (
IDENTIFIER          index
PUNCTUATOR          <
IDENTIFIER          length
PUNCTUATOR          )
PUNCTUATOR          {
IDENTIFIER          char
IDENTIFIER          ch
PUNCTUATOR          =
IDENTIFIER          source
PUNCTUATOR          [
IDENTIFIER          index
PUNCTUATOR          ]
PUNCTUATOR          ;
KEYWORD             if
PUNCTUATOR          (
IDENTIFIER          isspace
PUNCTUATOR          (
IDENTIFIER          ch
PUNCTUATOR          )
PUNCTUATOR          )
PUNCTUATOR          {
IDENTIFIER          index
PUNCTUATOR          ++
PUNCTUATOR          ;
IDENTIFIER          continue
PUNCTUATOR          ;
PUNCTUATOR          }
IDENTIFIER          start
PUNCTUATOR          =
IDENTIFIER          index
PUNCTUATOR          ;
KEYWORD             if
PUNCTUATOR          (
IDENTIFIER          isalpha
PUNCTUATOR          (
IDENTIFIER          ch
PUNCTUATOR          )
PUNCTUATOR          |
PUNCTUATOR          |
IDENTIFIER          ch
PUNCTUATOR          ==
CHARACTER_CONSTANT  '_'
PUNCTUATOR          )
PUNCTUATOR          {
IDENTIFIER          do
PUNCTUATOR          {
IDENTIFIER          index
PUNCTUATOR          ++
PUNCTUATOR          ;
PUNCTUATOR          }
KEYWORD             while
PUNCTUATOR          (
IDENTIFIER          isalnum
PUNCTUATOR          (
IDENTIFIER          source
PUNCTUATOR          [
IDENTIFIER          index
PUNCTUATOR          ]
PUNCTUATOR          )
PUNCTUATOR          |
PUNCTUATOR          |
IDENTIFIER          source
PUNCTUATOR          [
IDENTIFIER          index
PUNCTUATOR          ]
PUNCTUATOR          ==
CHARACTER_CONSTANT  '_'
PUNCTUATOR          )
PUNCTUATOR          ;
IDENTIFIER          currentToken
PUNCTUATOR          .
IDENTIFIER          start
PUNCTUATOR          =
IDENTIFIER          start
PUNCTUATOR          ;
IDENTIFIER          currentToken
PUNCTUATOR          .
IDENTIFIER          end
PUNCTUATOR          =
IDENTIFIER          index
PUNCTUATOR          ;
IDENTIFIER          char
IDENTIFIER          value
PUNCTUATOR          [
CONSTANT            100
PUNCTUATOR          ]
PUNCTUATOR          ;
IDENTIFIER          snprintf
PUNCTUATOR          (
IDENTIFIER          value
PUNCTUATOR          ,
IDENTIFIER          index
PUNCTUATOR          -
IDENTIFIER          start
PUNCTUATOR          +
CONSTANT            1
PUNCTUATOR          ,
STRING_LITERAL      "%s"
PUNCTUATOR          ,
IDENTIFIER          source
PUNCTUATOR          +
IDENTIFIER          start
PUNCTUATOR          )
PUNCTUATOR          ;
IDENTIFIER          currentToken
PUNCTUATOR          .
IDENTIFIER          type
PUNCTUATOR          =
IDENTIFIER          isKeyword
PUNCTUATOR          (
IDENTIFIER          value
PUNCTUATOR          )
PUNCTUATOR          ?
IDENTIFIER          KEYWORD
PUNCTUATOR          :
IDENTIFIER          IDENTIFIER
PUNCTUATOR          ;
PUNCTUATOR          }
KEYWORD             else
KEYWORD             if
PUNCTUATOR          (
IDENTIFIER          isdigit
PUNCTUATOR          (
IDENTIFIER          ch
PUNCTUATOR          )
PUNCTUATOR          )
PUNCTUATOR          {
IDENTIFIER          do
PUNCTUATOR          {
IDENTIFIER          index
PUNCTUATOR          ++
PUNCTUATOR          ;
PUNCTUATOR          }
KEYWORD             while
PUNCTUATOR          (
IDENTIFIER          isdigit
PUNCTUATOR          (
IDENTIFIER          source
PUNCTUATOR          [
IDENTIFIER          index
PUNCTUATOR          ]
PUNCTUATOR          )
PUNCTUATOR          )
PUNCTUATOR          ;
IDENTIFIER          currentToken
PUNCTUATOR          .
IDENTIFIER          start
PUNCTUATOR          =
IDENTIFIER          start
PUNCTUATOR          ;
IDENTIFIER          currentToken
PUNCTUATOR          .
IDENTIFIER          end
PUNCTUATOR          =
IDENTIFIER          index
PUNCTUATOR          ;
IDENTIFIER          currentToken
PUNCTUATOR          .
IDENTIFIER          type
PUNCTUATOR          =
IDENTIFIER          CONSTANT
PUNCTUATOR          ;
PUNCTUATOR          }
KEYWORD             else
KEYWORD             if
PUNCTUATOR          (
IDENTIFIER          ch
PUNCTUATOR          ==
CHARACTER_CONSTANT  '"'
PUNCTUATOR          )
PUNCTUATOR          {
IDENTIFIER          index
PUNCTUATOR          ++
PUNCTUATOR          ;
KEYWORD             while
PUNCTUATOR          (
IDENTIFIER          source
PUNCTUATOR          [
IDENTIFIER          index
PUNCTUATOR          ]
PUNCTUATOR          !=
CHARACTER_CONSTANT  '"'
PUNCTUATOR          &
PUNCTUATOR          &
IDENTIFIER          index
PUNCTUATOR          <
IDENTIFIER          length
PUNCTUATOR          )
PUNCTUATOR          {
KEYWORD             if
PUNCTUATOR          (
IDENTIFIER          source
PUNCTUATOR          [
IDENTIFIER          index
PUNCTUATOR          ]
PUNCTUATOR          ==
CHARACTER_CONSTANT  '\\'
PUNCTUATOR          )
PUNCTUATOR          {
IDENTIFIER          index
PUNCTUATOR          ++
PUNCTUATOR          ;
PUNCTUATOR          }
IDENTIFIER          index
PUNCTUATOR          ++
PUNCTUATOR          ;
PUNCTUATOR          }
KEYWORD             if
PUNCTUATOR          (
IDENTIFIER          source
PUNCTUATOR          [
IDENTIFIER          index
PUNCTUATOR          ]
PUNCTUATOR          ==
CHARACTER_CONSTANT  '"'
PUNCTUATOR          )
PUNCTUATOR          {
IDENTIFIER          index
PUNCTUATOR          ++
PUNCTUATOR          ;
PUNCTUATOR          }
IDENTIFIER          currentToken
PUNCTUATOR          .
IDENTIFIER          start
PUNCTUATOR          =
IDENTIFIER          start
PUNCTUATOR          ;
IDENTIFIER          currentToken
PUNCTUATOR          .
IDENTIFIER          end
PUNCTUATOR          =
IDENTIFIER          index
PUNCTUATOR          ;
IDENTIFIER          currentToken
PUNCTUATOR          .
IDENTIFIER          type
PUNCTUATOR          =
IDENTIFIER          STRING_LITERAL
PUNCTUATOR          ;
PUNCTUATOR          }
KEYWORD             else
KEYWORD             if
PUNCTUATOR          (
IDENTIFIER          ch
PUNCTUATOR          ==
CHARACTER_CONSTANT  '\''
PUNCTUATOR          )
PUNCTUATOR          {
IDENTIFIER          index
PUNCTUATOR          ++
PUNCTUATOR          ;
KEYWORD             while
PUNCTUATOR          (
IDENTIFIER          source
PUNCTUATOR          [
IDENTIFIER          index
PUNCTUATOR          ]
PUNCTUATOR          !=
CHARACTER_CONSTANT  '\''
PUNCTUATOR          &
PUNCTUATOR          &
IDENTIFIER          index
PUNCTUATOR          <
IDENTIFIER          length
PUNCTUATOR          )
PUNCTUATOR          {
KEYWORD             if
PUNCTUATOR          (
IDENTIFIER          source
PUNCTUATOR          [
IDENTIFIER          index
PUNCTUATOR          ]
PUNCTUATOR          ==
CHARACTER_CONSTANT  '\\'
PUNCTUATOR          )
PUNCTUATOR          {
IDENTIFIER          index
PUNCTUATOR          ++
PUNCTUATOR          ;
PUNCTUATOR          }
IDENTIFIER          index
PUNCTUATOR          ++
PUNCTUATOR          ;
PUNCTUATOR          }
KEYWORD             if
PUNCTUATOR          (
IDENTIFIER          source
PUNCTUATOR          [
IDENTIFIER          index
PUNCTUATOR          ]
PUNCTUATOR          ==
CHARACTER_CONSTANT  '\''
PUNCTUATOR          )
PUNCTUATOR          {
IDENTIFIER          index
PUNCTUATOR          ++
PUNCTUATOR          ;
PUNCTUATOR          }
IDENTIFIER          currentToken
PUNCTUATOR          .
IDENTIFIER          start
PUNCTUATOR          =
IDENTIFIER          start
PUNCTUATOR          ;
IDENTIFIER          currentToken
PUNCTUATOR          .
IDENTIFIER          end
PUNCTUATOR          =
IDENTIFIER          index
PUNCTUATOR          ;
IDENTIFIER          currentToken
PUNCTUATOR          .
IDENTIFIER          type
PUNCTUATOR          =
IDENTIFIER          CHARACTER_CONSTANT
PUNCTUATOR          ;
PUNCTUATOR          }
KEYWORD             else
KEYWORD             if
PUNCTUATOR          (
IDENTIFIER          ch
PUNCTUATOR          ==
CHARACTER_CONSTANT  '/'
PUNCTUATOR          &
PUNCTUATOR          &
IDENTIFIER          source
PUNCTUATOR          [
IDENTIFIER          index
PUNCTUATOR          +
CONSTANT            1
PUNCTUATOR          ]
PUNCTUATOR          ==
CHARACTER_CONSTANT  '/'
PUNCTUATOR          )
PUNCTUATOR          {
IDENTIFIER          index
PUNCTUATOR          +=
CONSTANT            2
PUNCTUATOR          ;
KEYWORD             while
PUNCTUATOR          (
IDENTIFIER          source
PUNCTUATOR          [
IDENTIFIER          index
PUNCTUATOR          ]
PUNCTUATOR          !=
CHARACTER_CONSTANT  '\n'
PUNCTUATOR          &
PUNCTUATOR          &
IDENTIFIER          index
PUNCTUATOR          <
IDENTIFIER          length
PUNCTUATOR          )
PUNCTUATOR          {
IDENTIFIER          index
PUNCTUATOR          ++
PUNCTUATOR          ;
PUNCTUATOR          }
IDENTIFIER          currentToken
PUNCTUATOR          .
IDENTIFIER          start
PUNCTUATOR          =
IDENTIFIER          start
PUNCTUATOR          ;
IDENTIFIER          currentToken
PUNCTUATOR          .
IDENTIFIER          end
PUNCTUATOR          =
IDENTIFIER          index
PUNCTUATOR          ;
IDENTIFIER          currentToken
PUNCTUATOR          .
IDENTIFIER          type
PUNCTUATOR          =
IDENTIFIER          SINGLE_LINE_COMMENT
PUNCTUATOR          ;
PUNCTUATOR          }
KEYWORD             else
KEYWORD             if
PUNCTUATOR          (
IDENTIFIER          strchr
PUNCTUATOR          (
IDENTIFIER          punctuators
PUNCTUATOR          ,
IDENTIFIER          ch
PUNCTUATOR          )
PUNCTUATOR          !=
IDENTIFIER          NULL
PUNCTUATOR          )
PUNCTUATOR          {
IDENTIFIER          index
PUNCTUATOR          ++
PUNCTUATOR          ;
IDENTIFIER          currentToken
PUNCTUATOR          .
IDENTIFIER          start
PUNCTUATOR          =
IDENTIFIER          start
PUNCTUATOR          ;
IDENTIFIER          currentToken
PUNCTUATOR          .
IDENTIFIER          end
PUNCTUATOR          =
IDENTIFIER          index
PUNCTUATOR          ;
IDENTIFIER          currentToken
PUNCTUATOR          .
IDENTIFIER          type
PUNCTUATOR          =
IDENTIFIER          PUNCTUATOR
PUNCTUATOR          ;
SINGLE_LINE_COMMENT // TODO: Handle compound punctuators separately
KEYWORD             if
PUNCTUATOR          (
PUNCTUATOR          (
IDENTIFIER          ch
PUNCTUATOR          ==
CHARACTER_CONSTANT  '+'
PUNCTUATOR          &
PUNCTUATOR          &
IDENTIFIER          source
PUNCTUATOR          [
IDENTIFIER          index
PUNCTUATOR          ]
PUNCTUATOR          ==
CHARACTER_CONSTANT  '+'
PUNCTUATOR          )
PUNCTUATOR          |
PUNCTUATOR          |
PUNCTUATOR          (
IDENTIFIER          source
PUNCTUATOR          [
IDENTIFIER          index
PUNCTUATOR          ]
PUNCTUATOR          ==
CHARACTER_CONSTANT  '='
PUNCTUATOR          )
PUNCTUATOR          )
PUNCTUATOR          {
IDENTIFIER          index
PUNCTUATOR          ++
PUNCTUATOR          ;
IDENTIFIER          currentToken
PUNCTUATOR          .
IDENTIFIER          end
PUNCTUATOR          =
IDENTIFIER          index
PUNCTUATOR          ;
PUNCTUATOR          }
PUNCTUATOR          }
KEYWORD             else
PUNCTUATOR          {
IDENTIFIER          index
PUNCTUATOR          ++
PUNCTUATOR          ;
IDENTIFIER          currentToken
PUNCTUATOR          .
IDENTIFIER          start
PUNCTUATOR          =
IDENTIFIER          start
PUNCTUATOR          ;
IDENTIFIER          currentToken
PUNCTUATOR          .
IDENTIFIER          end
PUNCTUATOR          =
IDENTIFIER          index
PUNCTUATOR          ;
IDENTIFIER          currentToken
PUNCTUATOR          .
IDENTIFIER          type
PUNCTUATOR          =
IDENTIFIER          UNKNOWN
PUNCTUATOR          ;
PUNCTUATOR          }
IDENTIFIER          printToken
PUNCTUATOR          (
PUNCTUATOR          &
IDENTIFIER          currentToken
PUNCTUATOR          ,
IDENTIFIER          source
PUNCTUATOR          )
PUNCTUATOR          ;
PUNCTUATOR          }
PUNCTUATOR          }
IDENTIFIER          void
IDENTIFIER          printUsage
PUNCTUATOR          (
IDENTIFIER          const
IDENTIFIER          char
PUNCTUATOR          *
IDENTIFIER          programName
PUNCTUATOR          )
PUNCTUATOR          {
IDENTIFIER          printf
PUNCTUATOR          (
STRING_LITERAL      "Usage: %s <filename>\n"
PUNCTUATOR          ,
IDENTIFIER          programName
PUNCTUATOR          )
PUNCTUATOR          ;
IDENTIFIER          printf
PUNCTUATOR          (
STRING_LITERAL      "Tokenizes the given C source file and prints tokens to the console.\n"
PUNCTUATOR          )
PUNCTUATOR          ;
PUNCTUATOR          }
KEYWORD             int
IDENTIFIER          main
PUNCTUATOR          (
KEYWORD             int
IDENTIFIER          argc
PUNCTUATOR          ,
IDENTIFIER          char
PUNCTUATOR          *
IDENTIFIER          argv
PUNCTUATOR          [
PUNCTUATOR          ]
PUNCTUATOR          )
PUNCTUATOR          {
KEYWORD             if
PUNCTUATOR          (
IDENTIFIER          argc
PUNCTUATOR          !=
CONSTANT            2
PUNCTUATOR          )
PUNCTUATOR          {
IDENTIFIER          printUsage
PUNCTUATOR          (
IDENTIFIER          argv
PUNCTUATOR          [
CONSTANT            0
PUNCTUATOR          ]
PUNCTUATOR          )
PUNCTUATOR          ;
KEYWORD             return
CONSTANT            1
PUNCTUATOR          ;
PUNCTUATOR          }
IDENTIFIER          const
IDENTIFIER          char
PUNCTUATOR          *
IDENTIFIER          fileName
PUNCTUATOR          =
IDENTIFIER          argv
PUNCTUATOR          [
CONSTANT            1
PUNCTUATOR          ]
PUNCTUATOR          ;
IDENTIFIER          FILE
PUNCTUATOR          *
IDENTIFIER          fp
PUNCTUATOR          =
IDENTIFIER          fopen
PUNCTUATOR          (
IDENTIFIER          fileName
PUNCTUATOR          ,
STRING_LITERAL      "r"
PUNCTUATOR          )
PUNCTUATOR          ;
KEYWORD             if
PUNCTUATOR          (
PUNCTUATOR          !
IDENTIFIER          fp
PUNCTUATOR          )
PUNCTUATOR          {
IDENTIFIER          fprintf
PUNCTUATOR          (
IDENTIFIER          stderr
PUNCTUATOR          ,
STRING_LITERAL      "Could not open file %s\n"
PUNCTUATOR          ,
IDENTIFIER          fileName
PUNCTUATOR          )
PUNCTUATOR          ;
KEYWORD             return
CONSTANT            1
PUNCTUATOR          ;
PUNCTUATOR          }
IDENTIFIER          fseek
PUNCTUATOR          (
IDENTIFIER          fp
PUNCTUATOR          ,
CONSTANT            0
PUNCTUATOR          ,
IDENTIFIER          SEEK_END
PUNCTUATOR          )
PUNCTUATOR          ;
IDENTIFIER          long
IDENTIFIER          fsize
PUNCTUATOR          =
IDENTIFIER          ftell
PUNCTUATOR          (
IDENTIFIER          fp
PUNCTUATOR          )
PUNCTUATOR          ;
IDENTIFIER          fseek
PUNCTUATOR          (
IDENTIFIER          fp
PUNCTUATOR          ,
CONSTANT            0
PUNCTUATOR          ,
IDENTIFIER          SEEK_SET
PUNCTUATOR          )
PUNCTUATOR          ;
IDENTIFIER          char
PUNCTUATOR          *
IDENTIFIER          source
PUNCTUATOR          =
IDENTIFIER          malloc
PUNCTUATOR          (
IDENTIFIER          fsize
PUNCTUATOR          +
CONSTANT            1
PUNCTUATOR          )
PUNCTUATOR          ;
IDENTIFIER          fread
PUNCTUATOR          (
IDENTIFIER          source
PUNCTUATOR          ,
CONSTANT            1
PUNCTUATOR          ,
IDENTIFIER          fsize
PUNCTUATOR          ,
IDENTIFIER          fp
PUNCTUATOR          )
PUNCTUATOR          ;
IDENTIFIER          source
PUNCTUATOR          [
IDENTIFIER          fsize
PUNCTUATOR          ]
PUNCTUATOR          =
CHARACTER_CONSTANT  '\0'
PUNCTUATOR          ;
IDENTIFIER          fclose
PUNCTUATOR          (
IDENTIFIER          fp
PUNCTUATOR          )
PUNCTUATOR          ;
IDENTIFIER          tokenize
PUNCTUATOR          (
IDENTIFIER          source
PUNCTUATOR          )
PUNCTUATOR          ;
IDENTIFIER          free
PUNCTUATOR          (
IDENTIFIER          source
PUNCTUATOR          )
PUNCTUATOR          ;
PUNCTUATOR          }
